#
# Also shared at http://stackoverflow.com/questions/11254908/how-to-set-up-loggly-on-elastic-beanstalk:
# Here is an elasticbeanstalk config for Loggly that I've just started using thanks to pointers from this thread and the
# logging SaaS vendors setup instructions. [Loggly Config Mgmt, Papertrail rsyslog ]
# Save the file as loggly.config in the .ebextensions directory and make sure to check the YAML formatting conventions (no tabs, etc).
# Substitute your Loggly TCP port number, username, password and domain name into the angle brackets as required.
# Note that for AWS ruby versions of elasticbeanstalk, there may be differences in the EC2 /etc/rsyslog setup. For example,
# if /etc/rsyslog.d already exists, and there is already an "$IncludeConfig /etc/rsyslog.d/*.conf" directive, then command "01-forward-rsyslog-to-loggly:" can be removed.
# Deploy per normal scripts or aws.push. To help debug the push, ssh & tail /var/log/cfn-init.log
#
files:
  "/etc/rsyslog.d/90-loggly.conf" :
    mode: "000664"
    owner: root
    group: root
    content: |
      # ### begin forwarding rule ###
      # The statement between the begin ... end define a SINGLE forwarding
      # rule. They belong together, do NOT split them. If you create multiple
      # forwarding rules, duplicate the whole block!
      # Remote Logging (we use TCP for reliable delivery)
      #
      # An on-disk queue is created for this action. If the remote host is
      # down, messages are spooled to disk and sent when it is up again.
      $WorkDirectory /var/lib/rsyslog # where to place spool files
      $ActionQueueFileName fwdRule1 # unique name prefix for spool files
      $ActionQueueMaxDiskSpace 1g   # 1gb space limit (use as much as possible)
      $ActionQueueSaveOnShutdown on # save messages to disk on shutdown
      $ActionQueueType LinkedList   # run asynchronously
      $ActionResumeRetryCount -1    # infinite retries if host is down
      *.* @@logs.loggly.com:<**Loggly port number**>   # !!!Loggly supplied port number for each app!!!
      # ### end of the forwarding rule ###
    encoding: plain
  "/tmp/loggly.py" :
    mode: "000755"
    owner: root
    group: root
    content: |
      import json
      import sys
      import urllib2
      '''
      Auto-authenticate Syslog TCP inputs.
      Usage: python inputs.py -u user -p pass -s subdomain
      '''
      state = None
      params = {}
      for i in range(len(sys.argv)):
         arg = sys.argv[i]
         if state:
             params[state] = arg
             state = None
 
         if arg == '--username' or arg == '-u':
             state = 'username'
 
         if arg == '--password' or arg == '-p':
             state = 'password'
 
         if arg == '--subdomain' or arg == '-s':
             state = 'subdomain'
      url = 'https://%s.loggly.com/api/inputs' % params['subdomain']
      password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
      password_mgr.add_password(None, url, params['username'], params['password'])
      handler = urllib2.HTTPBasicAuthHandler(password_mgr)
      opener = urllib2.build_opener(handler)
      opener.open(url)
      urllib2.install_opener(opener)
      inputs = json.loads(urllib2.urlopen(url).read())
      for input in inputs:
         if input['service']['name'] == 'syslogtcp':
             url = 'https://%s.loggly.com/api/inputs/%d/adddevice' % \
                 (params['subdomain'], input['id'])
             response = urllib2.urlopen(url, {}).read()
             print response
    encoding: plain

commands:
  01_loggly_command:
    command: "touch /tmp/$(date '+%F.%T.%N').loggly_cmd_01"
  02-forward-rsyslog-to-loggly:
    # http://loggly.com/support/sending-data/logging-from/syslog/rsyslog/cd
    command: test "$(grep -s '90-loggly.conf' /etc/rsyslog.conf)" == "" && echo -e "\n# Include the loggly.conf file\n\$IncludeConfig /etc/rsyslog.d/90-loggly.conf" >> /etc/rsyslog.conf
  02a_loggly_command:
    command: "touch /tmp/$(date '+%F.%T.%N').loggly_cmd_2a"
  03-restart-syslog:
    command: service rsyslog restart
  03a_loggly_command:
    command: "touch /tmp/$(date '+%F.%T.%N').loggly_cmd_3a"
  04-inform_loggly:
    command: "python /tmp/loggly.py -u <**Loggly_userid**> -p <**Loggly_password**> -s <**Loggly_domain_name**>"
  04a_loggly_command:
    command: "touch /tmp/$(date '+%F.%T.%N').loggly_cmd_4a"
